-- Leo IceHub - Centered Top-Right Open Button (Full, Fixed)
-- Paste into LeoTestMenu.lua on your repo (or StarterPlayerScripts for direct use).
-- Menu starts HIDDEN, positioned exactly at AnchorPoint=(0.5,0.5) Position=(0.5,0.5).
-- Open button located top-right. All buttons fully functional.

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild("PlayerGui")

-- remove old instances if present
if playerGui:FindFirstChild("LeoIceHub_UI") then playerGui.LeoIceHub_UI:Destroy() end
if playerGui:FindFirstChild("LeoIceHub_OpenBtn") then playerGui.LeoIceHub_OpenBtn:Destroy() end

-- state
local state = {
    speedEnabled = false,
    speedVal = 60,
    jumpEnabled = false,
    jumpVal = 140,
    godEnabled = false,
    flyEnabled = false,
    flySpeed = 80,
    flyBV = nil,
    flyBG = nil,
    flyConn = nil
}

local function safeWaitCharacter()
    return localPlayer.Character or localPlayer.CharacterAdded:Wait()
end
local function getHumanoid()
    local ch = localPlayer.Character
    if not ch then return nil end
    return ch:FindFirstChildOfClass("Humanoid")
end
local function notify(title, text, duration)
    pcall(function()
        StarterGui:SetCore("SendNotification", {Title = title or "LeoHub", Text = text or "", Duration = duration or 2})
    end)
end

-- reapply on spawn
local function applyToHumanoid(hum)
    if not hum then return end
    hum.WalkSpeed = state.speedEnabled and state.speedVal or 16
    hum.JumpPower = state.jumpEnabled and state.jumpVal or 50
    if state.godEnabled then
        hum.MaxHealth = math.huge
        hum.Health = hum.MaxHealth
        hum.HealthChanged:Connect(function()
            if hum and hum.Health < hum.MaxHealth then hum.Health = hum.MaxHealth end
        end)
    else
        hum.MaxHealth = 100
    end
end
local function onCharacterAdded(chr)
    task.wait(0.1)
    local hum = chr:FindFirstChildOfClass("Humanoid") or chr:WaitForChild("Humanoid")
    applyToHumanoid(hum)
end
if localPlayer.Character then onCharacterAdded(localPlayer.Character) end
localPlayer.CharacterAdded:Connect(onCharacterAdded)

-- FLY
local flyLoop = nil
local function startFly()
    if state.flyEnabled then return end
    local char = safeWaitCharacter()
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then notify("Fly", "No HumanoidRootPart", 2); return end

    state.flyBV = Instance.new("BodyVelocity")
    state.flyBV.MaxForce = Vector3.new(1e5,1e5,1e5)
    state.flyBV.Velocity = Vector3.new(0,0,0)
    state.flyBV.Parent = hrp

    state.flyBG = Instance.new("BodyGyro")
    state.flyBG.MaxTorque = Vector3.new(1e5,1e5,1e5)
    state.flyBG.P = 2000
    state.flyBG.Parent = hrp

    state.flyEnabled = true
    notify("Fly","Enabled",1.4)

    flyLoop = RunService.RenderStepped:Connect(function()
        if not state.flyEnabled or not hrp then return end
        local cam = workspace.CurrentCamera
        local move = Vector3.new()
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then move = move + cam.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then move = move - cam.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then move = move - cam.CFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then move = move + cam.CFrame.RightVector end
        local up = 0
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then up = up + 1 end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then up = up - 1 end

        local dir = Vector3.new(move.X, up, move.Z)
        if dir.Magnitude > 0 then dir = dir.Unit * state.flySpeed end
        if state.flyBV then state.flyBV.Velocity = dir end
        if state.flyBG then
            local look = workspace.CurrentCamera and workspace.CurrentCamera.CFrame.LookVector or Vector3.new(0,0,1)
            state.flyBG.CFrame = CFrame.new(hrp.Position, hrp.Position + Vector3.new(look.X,0,look.Z))
        end
    end)
end

local function stopFly()
    state.flyEnabled = false
    if flyLoop then flyLoop:Disconnect(); flyLoop = nil end
    if state.flyBV then pcall(function() state.flyBV:Destroy() end); state.flyBV = nil end
    if state.flyBG then pcall(function() state.flyBG:Destroy() end); state.flyBG = nil end
    local hum = getHumanoid()
    if hum then hum.WalkSpeed = state.speedEnabled and state.speedVal or 16 end
    notify("Fly","Disabled",1.2)
end

-- Avatar copy helpers
local function populateList(frame)
    frame:ClearAllChildren()
    local layout = Instance.new("UIListLayout", frame)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0,6)
    for i,p in ipairs(Players:GetPlayers()) do
        if p ~= localPlayer then
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(1,-10,0,32)
            btn.BackgroundColor3 = Color3.fromRGB(20,20,30)
            btn.Position = UDim2.new(0,5,0,(i-1)*36)
            btn.TextColor3 = Color3.fromRGB(230,230,255)
            btn.Text = p.Name
            btn.Font = Enum.Font.Gotham
            btn.TextSize = 14
            btn.Parent = frame
            btn.MouseButton1Click:Connect(function()
                for _,c in pairs(frame:GetChildren()) do if c:IsA("TextButton") then c.BackgroundColor3 = Color3.fromRGB(20,20,30) end end
                btn.BackgroundColor3 = Color3.fromRGB(60,20,120)
                frame.selected = p
            end)
        end
    end
end

local function copyAvatar(target)
    if not target then notify("Avatar Copy","No player selected",2); return end
    local ok, desc = pcall(function() return Players:GetHumanoidDescriptionFromUserId(target.UserId) end)
    if not ok or not desc then notify("Avatar Copy","Unable to fetch avatar",2); return end
    local char = safeWaitCharacter()
    local hum = char:FindFirstChildOfClass("Humanoid")
    if hum then pcall(function() hum:ApplyDescription(desc) end); notify("Avatar Copy","Copied: "..target.Name,2) end
end

-- ---------- UI build ----------
local screenGui = Instance.new("ScreenGui", playerGui)
screenGui.Name = "LeoIceHub_UI"
screenGui.ResetOnSpawn = false
screenGui.Enabled = false -- start hidden

local MAIN_W, MAIN_H = 420, 520
local main = Instance.new("Frame", screenGui)
main.Name = "Main"
main.AnchorPoint = Vector2.new(0.5,0.5)
main.Position = UDim2.new(0.5,0,0.5,0) -- EXACT CENTER as requested
main.Size = UDim2.new(0, MAIN_W, 0, MAIN_H)
main.BackgroundColor3 = Color3.fromRGB(10,10,18)
main.BorderSizePixel = 0
main.ZIndex = 2
Instance.new("UICorner", main).CornerRadius = UDim.new(0,14)
local edge = Instance.new("UIStroke", main); edge.Color = Color3.fromRGB(75,160,255); edge.Thickness = 2; edge.Transparency = 0.35

-- title + controls
local title = Instance.new("TextLabel", main)
title.Size = UDim2.new(1,0,0,48)
title.Position = UDim2.new(0,0,0,0)
title.BackgroundTransparency = 0.12
title.BackgroundColor3 = Color3.fromRGB(18,18,28)
title.Font = Enum.Font.GothamBold
title.TextSize = 20
title.Text = "Leo IceHub • Neon"
title.TextColor3 = Color3.fromRGB(235,245,255)
Instance.new("UIStroke", title).Color = Color3.fromRGB(150,200,255)

local closeBtn = Instance.new("TextButton", main)
closeBtn.Size = UDim2.new(0,36,0,28)
closeBtn.Position = UDim2.new(1, -46, 0, 10)
closeBtn.Text = "X"
closeBtn.Font = Enum.Font.Gotham
closeBtn.TextSize = 16
closeBtn.BackgroundColor3 = Color3.fromRGB(200,70,70)
closeBtn.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0,6)

local plusBtn = Instance.new("TextButton", main)
plusBtn.Size = UDim2.new(0,34,0,28)
plusBtn.Position = UDim2.new(1, -92, 0, 10)
plusBtn.Text = "+"
plusBtn.Font = Enum.Font.GothamBold
plusBtn.TextSize = 18
plusBtn.BackgroundColor3 = Color3.fromRGB(60,120,255)
plusBtn.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", plusBtn).CornerRadius = UDim.new(0,6)

local minusBtn = Instance.new("TextButton", main)
minusBtn.Size = UDim2.new(0,34,0,28)
minusBtn.Position = UDim2.new(1, -128, 0, 10)
minusBtn.Text = "-"
minusBtn.Font = Enum.Font.GothamBold
minusBtn.TextSize = 18
minusBtn.BackgroundColor3 = Color3.fromRGB(60,120,255)
minusBtn.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", minusBtn).CornerRadius = UDim.new(0,6)

-- left and right containers
local left = Instance.new("Frame", main); left.Size = UDim2.new(0.58,-12,1,-64); left.Position = UDim2.new(0,8,0,56); left.BackgroundTransparency = 1
local right = Instance.new("Frame", main); right.Size = UDim2.new(0.38,-12,1,-64); right.Position = UDim2.new(0.62,4,0,56); right.BackgroundTransparency = 1

local function sectionLabel(text)
    local lbl = Instance.new("TextLabel")
    lbl.Size = UDim2.new(1,0,0,22)
    lbl.BackgroundTransparency = 1
    lbl.Font = Enum.Font.GothamSemibold
    lbl.TextSize = 13
    lbl.TextColor3 = Color3.fromRGB(160,200,255)
    lbl.Text = text
    return lbl
end

-- simple toggle factory
local function makeToggleBtn(parent, name, initial, callback)
    local btn = Instance.new("TextButton", parent)
    btn.Size = UDim2.new(1,0,0,38)
    btn.BackgroundColor3 = initial and Color3.fromRGB(10,50,30) or Color3.fromRGB(20,20,30)
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 16
    btn.TextColor3 = Color3.fromRGB(220,220,255)
    btn.Text = name .. (initial and " • ON" or " • OFF")
    Instance.new("UIStroke", btn).Color = Color3.fromRGB(80,160,255)
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)
    local toggled = initial
    btn.MouseButton1Click:Connect(function()
        toggled = not toggled
        btn.Text = name .. (toggled and " • ON" or " • OFF")
        btn.BackgroundColor3 = toggled and Color3.fromRGB(10,50,30) or Color3.fromRGB(20,20,30)
        pcall(callback, toggled)
    end)
    return btn
end

-- left content (speed/jump/fly/god/all)
local leftLayout = Instance.new("UIListLayout", left); leftLayout.Padding = UDim.new(0,8)
sectionLabel("Player Mods").Parent = left

local speedBtn = makeToggleBtn(left, "Speed", state.speedEnabled, function(on)
    state.speedEnabled = on
    local hum = getHumanoid(); if hum then hum.WalkSpeed = on and state.speedVal or 16 end
end)

-- speed slider
local speedRow = Instance.new("Frame", left); speedRow.Size = UDim2.new(1,0,0,36); speedRow.BackgroundTransparency = 1
local sLbl = Instance.new("TextLabel", speedRow); sLbl.Size = UDim2.new(0.5,0,1,0); sLbl.BackgroundTransparency = 1; sLbl.Text = "Speed: "..tostring(state.speedVal); sLbl.Font = Enum.Font.Gotham; sLbl.TextSize = 14; sLbl.TextColor3 = Color3.fromRGB(200,200,255); sLbl.TextXAlignment = Enum.TextXAlignment.Left
local sBarBg = Instance.new("Frame", speedRow); sBarBg.Size = UDim2.new(0.5,-6,0,12); sBarBg.Position = UDim2.new(0.5,6,0,12); sBarBg.BackgroundColor3 = Color3.fromRGB(12,12,20)
Instance.new("UICorner", sBarBg).CornerRadius = UDim.new(0,6)
local sBar = Instance.new("Frame", sBarBg); sBar.Size = UDim2.new((state.speedVal-16)/(200-16),0,1,0); Instance.new("UICorner", sBar)
local draggingS = false
sBarBg.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 or inp.UserInputType==Enum.UserInputType.Touch then draggingS=true end end)
sBarBg.InputEnded:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 or inp.UserInputType==Enum.UserInputType.Touch then draggingS=false end end)
UserInputService.InputChanged:Connect(function(inp)
    if not draggingS then return end
    if inp.UserInputType~=Enum.UserInputType.MouseMovement and inp.UserInputType~=Enum.UserInputType.Touch then return end
    local rel = math.clamp((inp.Position.X - sBarBg.AbsolutePosition.X) / sBarBg.AbsoluteSize.X, 0, 1)
    sBar.Size = UDim2.new(rel,0,1,0)
    local val = math.floor(16 + (200-16) * rel + 0.5)
    state.speedVal = val
    sLbl.Text = "Speed: "..tostring(val)
    local hum = getHumanoid(); if hum and state.speedEnabled and not state.flyEnabled then hum.WalkSpeed = val end
end)

local jumpBtn = makeToggleBtn(left, "Jump", state.jumpEnabled, function(on)
    state.jumpEnabled = on
    local hum = getHumanoid(); if hum then hum.JumpPower = on and state.jumpVal or 50 end
end)
-- jump slider
local jumpRow = Instance.new("Frame", left); jumpRow.Size = UDim2.new(1,0,0,36); jumpRow.BackgroundTransparency = 1
local jLbl = Instance.new("TextLabel", jumpRow); jLbl.Size = UDim2.new(0.5,0,1,0); jLbl.BackgroundTransparency = 1; jLbl.Text = "Jump: "..tostring(state.jumpVal); jLbl.Font = Enum.Font.Gotham; jLbl.TextSize = 14; jLbl.TextColor3 = Color3.fromRGB(200,200,255); jLbl.TextXAlignment = Enum.TextXAlignment.Left
local jBarBg = Instance.new("Frame", jumpRow); jBarBg.Size = UDim2.new(0.5,-6,0,12); jBarBg.Position = UDim2.new(0.5,6,0,12); jBarBg.BackgroundColor3 = Color3.fromRGB(12,12,20)
Instance.new("UICorner", jBarBg).CornerRadius = UDim.new(0,6)
local jBar = Instance.new("Frame", jBarBg); jBar.Size = UDim2.new((state.jumpVal-50)/(300-50),0,1,0); Instance.new("UICorner", jBar)
local draggingJ = false
jBarBg.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 or inp.UserInputType==Enum.UserInputType.Touch then draggingJ=true end end)
jBarBg.InputEnded:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 or inp.UserInputType==Enum.UserInputType.Touch then draggingJ=false end end)
UserInputService.InputChanged:Connect(function(inp)
    if not draggingJ then return end
    if inp.UserInputType~=Enum.UserInputType.MouseMovement and inp.UserInputType~=Enum.UserInputType.Touch then return end
    local rel = math.clamp((inp.Position.X - jBarBg.AbsolutePosition.X) / jBarBg.AbsoluteSize.X, 0, 1)
    jBar.Size = UDim2.new(rel,0,1,0)
    local val = math.floor(50 + (300-50) * rel + 0.5)
    state.jumpVal = val
    jLbl.Text = "Jump: "..tostring(val)
    local hum = getHumanoid(); if hum and state.jumpEnabled then hum.JumpPower = val end
end)

local flyBtn = makeToggleBtn(left, "Fly", state.flyEnabled, function(on)
    if on then startFly() else stopFly() end
end)

local godBtn = makeToggleBtn(left, "GodMode", state.godEnabled, function(on)
    state.godEnabled = on
    local hum = getHumanoid()
    if hum then
        if on then hum.MaxHealth = math.huge; hum.Health = hum.MaxHealth
        else hum.MaxHealth = 100; if hum.Health>100 then hum.Health = 100 end end
    end
end)

-- All On/Off
local allRow = Instance.new("Frame", left); allRow.Size = UDim2.new(1,0,0,40); allRow.BackgroundTransparency = 1
local allOn = Instance.new("TextButton", allRow); allOn.Size = UDim2.new(0.5,-6,1,0); allOn.Position = UDim2.new(0,0,0,0); allOn.Text = "All ON"; allOn.Font = Enum.Font.GothamBold; allOn.TextSize = 14; allOn.BackgroundColor3 = Color3.fromRGB(30,100,30)
local allOff = Instance.new("TextButton", allRow); allOff.Size = UDim2.new(0.5,-6,1,0); allOff.Position = UDim2.new(0.5,6,0,0); allOff.Text = "All OFF"; allOff.Font = Enum.Font.GothamBold; allOff.TextSize = 14; allOff.BackgroundColor3 = Color3.fromRGB(100,30,30)
allRow.Parent = left

allOn.MouseButton1Click:Connect(function()
    state.speedEnabled = true; state.jumpEnabled = true; state.godEnabled = true
    local hum = getHumanoid()
    if hum then hum.WalkSpeed = state.speedVal; hum.JumpPower = state.jumpVal; hum.MaxHealth = math.huge; hum.Health = hum.MaxHealth end
    speedBtn.BackgroundColor3 = Color3.fromRGB(10,50,30); speedBtn.Text = "Speed • ON"
    jumpBtn.BackgroundColor3 = Color3.fromRGB(10,50,30); jumpBtn.Text = "Jump • ON"
    godBtn.BackgroundColor3 = Color3.fromRGB(10,50,30); godBtn.Text = "GodMode • ON"
    notify("All","Enabled",1.4)
end)

allOff.MouseButton1Click:Connect(function()
    state.speedEnabled = false; state.jumpEnabled = false; state.godEnabled = false
    local hum = getHumanoid()
    if hum then hum.WalkSpeed = 16; hum.JumpPower = 50; hum.MaxHealth = 100; if hum.Health>100 then hum.Health=100 end end
    speedBtn.BackgroundColor3 = Color3.fromRGB(20,20,30); speedBtn.Text = "Speed • OFF"
    jumpBtn.BackgroundColor3 = Color3.fromRGB(20,20,30); jumpBtn.Text = "Jump • OFF"
    godBtn.BackgroundColor3 = Color3.fromRGB(20,20,30); godBtn.Text = "GodMode • OFF"
    stopFly()
    notify("All","Disabled",1.4)
end)

-- right column: avatar list + copy + refresh
sectionLabel("Avatar Copy").Parent = right
local playersScroll = Instance.new("ScrollingFrame", right); playersScroll.Size = UDim2.new(1,0,0.75,0); playersScroll.Position = UDim2.new(0,0,0.06,0); playersScroll.CanvasSize = UDim2.new(0,0,0,0); playersScroll.BackgroundTransparency = 1; playersScroll.ScrollBarThickness = 6
local copyBtn = Instance.new("TextButton", right); copyBtn.Size = UDim2.new(1,0,0,36); copyBtn.Position = UDim2.new(0,0,0.82,0); copyBtn.Text = "Copy Selected Avatar"; copyBtn.BackgroundColor3 = Color3.fromRGB(60,50,160); copyBtn.Font = Enum.Font.GothamBold; copyBtn.TextColor3 = Color3.fromRGB(240,240,255)
local refreshBtn = Instance.new("TextButton", right); refreshBtn.Size = UDim2.new(1,0,0,28); refreshBtn.Position = UDim2.new(0,0,0.9,0); refreshBtn.Text = "Refresh List"; refreshBtn.BackgroundColor3 = Color3.fromRGB(30,30,50); refreshBtn.Font = Enum.Font.Gotham; refreshBtn.TextSize = 13

populateList(playersScroll)
task.wait(0.06)
local layout = playersScroll:FindFirstChildWhichIsA("UIListLayout")
if layout then playersScroll.CanvasSize = UDim2.new(0,0,0, layout.AbsoluteContentSize.Y + 8) end

refreshBtn.MouseButton1Click:Connect(function()
    populateList(playersScroll)
    task.wait(0.05)
    local lo = playersScroll:FindFirstChildWhichIsA("UIListLayout")
    if lo then playersScroll.CanvasSize = UDim2.new(0,0,0, lo.AbsoluteContentSize.Y + 8) end
    notify("List","Refreshed",1.2)
end)

copyBtn.MouseButton1Click:Connect(function()
    local sel = playersScroll.selected
    if sel and Players:FindFirstChild(sel.Name) then copyAvatar(sel) else notify("Avatar Copy","No selection",1.6) end
end)

-- teleport
local tpBtn = Instance.new("TextButton", main)
tpBtn.Text = "Teleport to Spawn"
tpBtn.Size = UDim2.new(0.4, 0, 0, 34)
tpBtn.Position = UDim2.new(0.05, 0, 0.92, 0)
tpBtn.Font = Enum.Font.GothamBold
tpBtn.TextSize = 14
tpBtn.BackgroundColor3 = Color3.fromRGB(30,80,180)
tpBtn.TextColor3 = Color3.fromRGB(255,255,255)
tpBtn.MouseButton1Click:Connect(function()
    local char = localPlayer.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        local spawn = workspace:FindFirstChildOfClass("SpawnLocation") or workspace:FindFirstChild("Spawn")
        if spawn and spawn:IsA("BasePart") then char.HumanoidRootPart.CFrame = spawn.CFrame + Vector3.new(0,3,0) else char.HumanoidRootPart.CFrame = CFrame.new(0,10,0) end
        notify("TP","Teleported",1.2)
    end
end)

-- draggable (mouse & touch) - only when pressing title area (first 60px) or touch anywhere
local dragging = false; local dragInput = nil; local dragStart = nil; local startPos = nil
main.InputBegan:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
        local y = inp.Position.Y
        local topY = main.AbsolutePosition.Y
        if inp.UserInputType == Enum.UserInputType.MouseButton1 and y > topY + 60 then return end
        dragging = true; dragInput = inp; dragStart = inp.Position; startPos = main.Position
        inp.Changed:Connect(function() if inp.UserInputState == Enum.UserInputState.End then dragging = false; dragInput=nil; dragStart=nil; startPos=nil end end)
    end
end)
UserInputService.InputChanged:Connect(function(inp)
    if dragging and dragInput and inp == dragInput then
        local delta = inp.Position - dragStart
        main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- resizer (bottom-right) + pinch + +/- buttons
local resizer = Instance.new("Frame", main); resizer.Name = "Resizer"; resizer.Size = UDim2.new(0,18,0,18); resizer.AnchorPoint = Vector2.new(1,1); resizer.Position = UDim2.new(1,-8,1,-8); resizer.BackgroundColor3 = Color3.fromRGB(40,40,50)
Instance.new("UICorner", resizer).CornerRadius = UDim.new(0,6)
local draggingResize=false; local resizeInput=nil; local resizeStartPos=nil; local resizeStartSize=nil
resizer.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 or inp.UserInputType==Enum.UserInputType.Touch then draggingResize=true; resizeInput=inp; resizeStartPos=inp.Position; resizeStartSize = main.AbsoluteSize; inp.Changed:Connect(function() if inp.UserInputState==Enum.UserInputState.End then draggingResize=false; resizeInput=nil; resizeStartPos=nil; resizeStartSize=nil end end) end end)
UserInputService.InputChanged:Connect(function(inp)
    if draggingResize and resizeInput and inp==resizeInput then
        local delta = inp.Position - resizeStartPos
        local newW = math.clamp(resizeStartSize.X + delta.X, 300, workspace.CurrentCamera.ViewportSize.X - 40)
        local newH = math.clamp(resizeStartSize.Y + delta.Y, 200, workspace.CurrentCamera.ViewportSize.Y - 80)
        main.Size = UDim2.new(0, newW, 0, newH)
    end
end)

-- pinch-to-zoom (mobile)
local touches = {}; local pinchActive=false; local pinchStartDist=nil; local pinchStartSize=nil
UserInputService.InputBegan:Connect(function(inp)
    if inp.UserInputType==Enum.UserInputType.Touch then
        touches[inp.UserInputId] = inp
        local count = 0 for _ in pairs(touches) do count=count+1 end
        if count==2 then
            local ids={} for id,t in pairs(touches) do table.insert(ids,t) end
            pinchActive=true; pinchStartDist = (ids[1].Position - ids[2].Position).Magnitude; pinchStartSize = main.AbsoluteSize
        end
    end
end)
UserInputService.InputChanged:Connect(function(inp)
    if inp.UserInputType==Enum.UserInputType.Touch and pinchActive then touches[inp.UserInputId]=inp end
    if pinchActive then
        local ids={} for id,t in pairs(touches) do table.insert(ids,t) end
        if #ids>=2 and pinchStartDist and pinchStartSize then
            local cur = (ids[1].Position - ids[2].Position).Magnitude
            local scale = cur / pinchStartDist
            local w = math.clamp(pinchStartSize.X * scale, 300, workspace.CurrentCamera.ViewportSize.X - 40)
            local h = math.clamp(pinchStartSize.Y * scale, 200, workspace.CurrentCamera.ViewportSize.Y - 80)
            main.Size = UDim2.new(0, math.floor(w+0.5), 0, math.floor(h+0.5))
        end
    end
end)
UserInputService.InputEnded:Connect(function(inp)
    if inp.UserInputType==Enum.UserInputType.Touch then touches[inp.UserInputId]=nil; local count=0 for _ in pairs(touches) do count=count+1 end if count<2 then pinchActive=false; pinchStartDist=nil; pinchStartSize=nil end end
end)

-- plus/minus quick scale
local function applyScale(factor)
    local cur = main.AbsoluteSize
    local targetW = math.clamp(cur.X * factor, 300, workspace.CurrentCamera.ViewportSize.X - 40)
    local targetH = math.clamp(cur.Y * factor, 200, workspace.CurrentCamera.ViewportSize.Y - 80)
    main.Size = UDim2.new(0, math.floor(targetW+0.5), 0, math.floor(targetH+0.5))
end
plusBtn.MouseButton1Click:Connect(function() applyScale(1.12) end)
minusBtn.MouseButton1Click:Connect(function() applyScale(0.88) end)

-- OPEN button (top-right)
local openBtn = Instance.new("TextButton", playerGui)
openBtn.Name = "LeoIceHub_OpenBtn"
openBtn.Size = UDim2.new(0, 82, 0, 34)
openBtn.AnchorPoint = Vector2.new(1, 0) -- top-right anchor
openBtn.Position = UDim2.new(1, -20, 0, 20) -- 20 px from top-right
openBtn.BackgroundColor3 = Color3.fromRGB(20,20,30)
openBtn.Text = "ICE HUB"
openBtn.Font = Enum.Font.GothamBold
openBtn.TextSize = 14
openBtn.TextColor3 = Color3.fromRGB(200,240,255)
openBtn.AutoButtonColor = true
Instance.new("UICorner", openBtn).CornerRadius = UDim.new(0,8)
openBtn.ZIndex = 99

local animLock = false
local tweenIn = TweenInfo.new(0.26, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tweenOut = TweenInfo.new(0.22, Enum.EasingStyle.Quad, Enum.EasingDirection.In)

local function showMenu()
    if animLock then return end
    animLock = true
    screenGui.Enabled = true
    openBtn.Visible = false
    -- animate size from small to current size (keeps center fixed)
    local small = UDim2.new(0, math.clamp(MAIN_W*0.6,300,workspace.CurrentCamera.ViewportSize.X-40), 0, math.clamp(MAIN_H*0.6,200,workspace.CurrentCamera.ViewportSize.Y-80))
    main.Size = small
    local tw = TweenService:Create(main, tweenIn, {Size = UDim2.new(0, MAIN_W, 0, MAIN_H)})
    tw:Play()
    tw.Completed:Wait()
    animLock = false
end

local function hideMenu()
    if animLock then return end
    animLock = true
    local small = UDim2.new(0, math.clamp(MAIN_W*0.6,300,workspace.CurrentCamera.ViewportSize.X-40), 0, math.clamp(MAIN_H*0.6,200,workspace.CurrentCamera.ViewportSize.Y-80))
    local tw = TweenService:Create(main, tweenOut, {Size = small})
    tw:Play()
    tw.Completed:Wait()
    screenGui.Enabled = false
    openBtn.Visible = true
    -- ensure main is reset to exact center (user requested)
    main.AnchorPoint = Vector2.new(0.5,0.5)
    main.Position = UDim2.new(0.5,0,0.5,0)
    main.Size = UDim2.new(0, MAIN_W, 0, MAIN_H)
    animLock = false
end

openBtn.MouseButton1Click:Connect(showMenu)
closeBtn.MouseButton1Click:Connect(hideMenu)

-- Insert toggle
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.Insert then
        if screenGui.Enabled then hideMenu() else showMenu() end
    end
end)

-- cleanup
Players.PlayerRemoving:Connect(function(p)
    if p==localPlayer then
        if playerGui:FindFirstChild("LeoIceHub_UI") then playerGui.LeoIceHub_UI:Destroy() end
        if playerGui:FindFirstChild("LeoIceHub_OpenBtn") then playerGui.LeoIceHub_OpenBtn:Destroy() end
    end
end)

-- Final API
return {
    Open = showMenu,
    Close = hideMenu,
    ToggleFly = function() if state.flyEnabled then stopFly() else startFly() end end,
    ApplySpeed = function(v) state.speedVal = v; if state.speedEnabled and getHumanoid() and not state.flyEnabled then getHumanoid().WalkSpeed = v end end,
    ApplyJump = function(v) state.jumpVal = v; if state.jumpEnabled and getHumanoid() then getHumanoid().JumpPower = v end end,
    CopyAvatar = copyAvatar
}

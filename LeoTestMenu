-- LeoHubUI.lua
-- Full, polished LocalScript UI (place in StarterPlayerScripts OR host raw and loadstring)
-- Features: centered, neon style, top-right open button, draggable (mouse & touch), resizable (corner, +/-, pinch),
-- Speed/Jump sliders, Fly (BodyVelocity+BodyGyro), GodMode, Avatar copy, Teleport, All On/Off, notifications.

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild("PlayerGui")

-- cleanup any previous UI
if playerGui:FindFirstChild("LeoHubUI_Root") then
    playerGui.LeoHubUI_Root:Destroy()
end
if playerGui:FindFirstChild("LeoHubUI_OpenBtn") then
    playerGui.LeoHubUI_OpenBtn:Destroy()
end

-- state
local S = {
    speedEnabled = false,
    speedValue = 60,
    jumpEnabled = false,
    jumpValue = 140,
    godEnabled = false,
    flyEnabled = false,
    flySpeed = 80,
    flyBV = nil,
    flyBG = nil,
    flyConn = nil,
    connections = {}
}

-- helpers
local function notify(title, text, duration)
    pcall(function()
        StarterGui:SetCore("SendNotification", {Title = title or "LeoHub", Text = text or "", Duration = duration or 2})
    end)
end

local function cleanupConnections()
    for _,c in ipairs(S.connections) do
        if c and type(c.Disconnect) == "function" then
            pcall(function() c:Disconnect() end)
        end
    end
    S.connections = {}
end

local function getHumanoid()
    local ch = localPlayer.Character
    if not ch then return nil end
    return ch:FindFirstChildOfClass("Humanoid")
end

local function reapplySettings(hum)
    if not hum then return end
    hum.WalkSpeed = S.speedEnabled and S.speedValue or 16
    hum.JumpPower = S.jumpEnabled and S.jumpValue or 50
    if S.godEnabled then
        hum.MaxHealth = math.huge
        hum.Health = hum.MaxHealth
        -- guard: single connection
        local conn = hum.HealthChanged:Connect(function()
            if hum and hum.Health < hum.MaxHealth then
                hum.Health = hum.MaxHealth
            end
        end)
        table.insert(S.connections, conn)
    else
        hum.MaxHealth = 100
        if hum.Health > 100 then hum.Health = 100 end
    end
end

local function onCharacterAdded(char)
    task.wait(0.08)
    local hum = char:FindFirstChildOfClass("Humanoid") or char:WaitForChild("Humanoid")
    reapplySettings(hum)
end
if localPlayer.Character then
    onCharacterAdded(localPlayer.Character)
end
localPlayer.CharacterAdded:Connect(onCharacterAdded)

-- FLY (stable: BodyVelocity + BodyGyro)
local flyLoop
local function startFly()
    if S.flyEnabled then return end
    local char = localPlayer.Character
    if not char then notify("Fly","No character",2); return end
    local hrp = char:FindFirstChild("HumanoidRootPart")
    if not hrp then notify("Fly","No HumanoidRootPart",2); return end

    -- ensure old are removed
    if S.flyBV then pcall(function() S.flyBV:Destroy() end) end
    if S.flyBG then pcall(function() S.flyBG:Destroy() end) end

    S.flyBV = Instance.new("BodyVelocity")
    S.flyBV.MaxForce = Vector3.new(1e5,1e5,1e5)
    S.flyBV.Velocity = Vector3.new(0,0,0)
    S.flyBV.Parent = hrp

    S.flyBG = Instance.new("BodyGyro")
    S.flyBG.MaxTorque = Vector3.new(1e5,1e5,1e5)
    S.flyBG.P = 2000
    S.flyBG.CFrame = hrp.CFrame
    S.flyBG.Parent = hrp

    S.flyEnabled = true
    notify("Fly","Enabled",1.5)

    flyLoop = RunService.RenderStepped:Connect(function()
        if not S.flyEnabled or not hrp then return end
        local cam = workspace.CurrentCamera
        local move = Vector3.new()
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then move += cam.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then move -= cam.CFrame.LookVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then move -= cam.CFrame.RightVector end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then move += cam.CFrame.RightVector end
        local up = 0
        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then up += 1 end
        if UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then up -= 1 end

        local dir = Vector3.new(move.X, up, move.Z)
        if dir.Magnitude > 0 then dir = dir.Unit * S.flySpeed end
        if S.flyBV then S.flyBV.Velocity = dir end
        if S.flyBG then
            local look = workspace.CurrentCamera and workspace.CurrentCamera.CFrame.LookVector or Vector3.new(0,0,1)
            S.flyBG.CFrame = CFrame.new(hrp.Position, hrp.Position + Vector3.new(look.X,0,look.Z))
        end
    end)
    table.insert(S.connections, flyLoop)
end

local function stopFly()
    S.flyEnabled = false
    if flyLoop then pcall(function() flyLoop:Disconnect() end); flyLoop = nil end
    if S.flyBV then pcall(function() S.flyBV:Destroy() end); S.flyBV = nil end
    if S.flyBG then pcall(function() S.flyBG:Destroy() end); S.flyBG = nil end
    local hum = getHumanoid()
    if hum then hum.WalkSpeed = (S.speedEnabled and S.speedValue) or 16 end
    notify("Fly","Disabled",1.2)
end

-- Avatar copy helper
local function populatePlayerList(container)
    container:ClearAllChildren()
    local listLayout = Instance.new("UIListLayout", container)
    listLayout.SortOrder = Enum.SortOrder.LayoutOrder
    listLayout.Padding = UDim.new(0,6)
    local i = 0
    for _,p in ipairs(Players:GetPlayers()) do
        if p ~= localPlayer then
            i = i + 1
            local btn = Instance.new("TextButton")
            btn.Size = UDim2.new(1, -12, 0, 34)
            btn.Position = UDim2.new(0, 6, 0, (i-1)*40)
            btn.BackgroundColor3 = Color3.fromRGB(23,23,30)
            btn.BorderSizePixel = 0
            btn.AutoButtonColor = true
            btn.Font = Enum.Font.Gotham
            btn.TextSize = 14
            btn.TextColor3 = Color3.fromRGB(230,230,255)
            btn.Text = p.Name
            btn.Parent = container
            btn.MouseButton1Click:Connect(function()
                for _,c in pairs(container:GetChildren()) do
                    if c:IsA("TextButton") then c.BackgroundColor3 = Color3.fromRGB(23,23,30) end
                end
                btn.BackgroundColor3 = Color3.fromRGB(65,28,150)
                container.Selected = p
            end)
        end
    end
    -- adjust canvas size if scrolling frame
    if container:IsA("ScrollingFrame") then
        task.wait(0.05)
        local layout = container:FindFirstChildWhichIsA("UIListLayout")
        if layout then
            container.CanvasSize = UDim2.new(0,0,0, layout.AbsoluteContentSize.Y + 8)
        end
    end
end

local function copyAvatar(selected)
    if not selected then notify("Avatar Copy","No player selected",2); return end
    local ok, desc = pcall(function() return Players:GetHumanoidDescriptionFromUserId(selected.UserId) end)
    if not ok or not desc then notify("Avatar Copy","Could not fetch description",2); return end
    local ch = localPlayer.Character
    if not ch then notify("Avatar Copy","No character",2); return end
    local hum = ch:FindFirstChildOfClass("Humanoid")
    if hum then
        pcall(function() hum:ApplyDescription(desc) end)
        notify("Avatar Copy","Copied from "..selected.Name,2)
    end
end

-- ---------- UI BUILD ----------
local root = Instance.new("ScreenGui")
root.Name = "LeoHubUI_Root"
root.ResetOnSpawn = false
root.Parent = playerGui
root.Enabled = false -- start closed

-- main container
local MAIN_W, MAIN_H = 460, 520
local main = Instance.new("Frame", root)
main.Name = "Main"
main.AnchorPoint = Vector2.new(0.5,0.5)
main.Position = UDim2.new(0.5, 0, 0.5, 0) -- EXACT CENTER as requested
main.Size = UDim2.new(0, MAIN_W, 0, MAIN_H)
main.BackgroundColor3 = Color3.fromRGB(12,12,18)
main.BorderSizePixel = 0
main.ZIndex = 50
local mc = Instance.new("UICorner", main); mc.CornerRadius = UDim.new(0,12)
local stroke = Instance.new("UIStroke", main); stroke.Color = Color3.fromRGB(80,170,255); stroke.Thickness = 2; stroke.Transparency = 0.28

-- title bar
local titleBar = Instance.new("Frame", main)
titleBar.Size = UDim2.new(1,0,0,52)
titleBar.Position = UDim2.new(0,0,0,0)
titleBar.BackgroundColor3 = Color3.fromRGB(18,18,26)
titleBar.BorderSizePixel = 0
local titleLabel = Instance.new("TextLabel", titleBar)
titleLabel.Size = UDim2.new(1, -140, 1, 0)
titleLabel.Position = UDim2.new(0, 12, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextSize = 20
titleLabel.TextColor3 = Color3.fromRGB(235,245,255)
titleLabel.Text = "LeoHub â€¢ Neon UI"
titleLabel.TextXAlignment = Enum.TextXAlignment.Left

local titleAccent = Instance.new("UIGradient", titleBar)
titleAccent.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(65,150,255)), ColorSequenceKeypoint.new(1, Color3.fromRGB(120,85,255))}
titleAccent.Rotation = 45

-- control buttons (close, +, -)
local closeBtn = Instance.new("TextButton", titleBar)
closeBtn.Name = "Close"
closeBtn.Size = UDim2.new(0,36,0,28)
closeBtn.Position = UDim2.new(1, -46, 0, 12)
closeBtn.Text = "X"
closeBtn.Font = Enum.Font.Gotham
closeBtn.TextSize = 16
closeBtn.BackgroundColor3 = Color3.fromRGB(200,70,70)
closeBtn.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", closeBtn).CornerRadius = UDim.new(0,6)

local plusBtn = Instance.new("TextButton", titleBar)
plusBtn.Size = UDim2.new(0,34,0,28)
plusBtn.Position = UDim2.new(1, -92, 0, 12)
plusBtn.Text = "+"
plusBtn.Font = Enum.Font.GothamBold
plusBtn.TextSize = 18
plusBtn.BackgroundColor3 = Color3.fromRGB(60,120,255)
plusBtn.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", plusBtn).CornerRadius = UDim.new(0,6)

local minusBtn = Instance.new("TextButton", titleBar)
minusBtn.Size = UDim2.new(0,34,0,28)
minusBtn.Position = UDim2.new(1, -128, 0, 12)
minusBtn.Text = "-"
minusBtn.Font = Enum.Font.GothamBold
minusBtn.TextSize = 18
minusBtn.BackgroundColor3 = Color3.fromRGB(60,120,255)
minusBtn.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", minusBtn).CornerRadius = UDim.new(0,6)

-- layout columns
local left = Instance.new("Frame", main)
left.Size = UDim2.new(0.60, -12, 1, -68)
left.Position = UDim2.new(0, 8, 0, 56)
left.BackgroundTransparency = 1

local right = Instance.new("Frame", main)
right.Size = UDim2.new(0.40, -12, 1, -68)
right.Position = UDim2.new(0.60, 8, 0, 56)
right.BackgroundTransparency = 1

-- basic section label factory
local function SectionLabel(text)
    local lbl = Instance.new("TextLabel")
    lbl.Size = UDim2.new(1,0,0,18)
    lbl.BackgroundTransparency = 1
    lbl.Font = Enum.Font.GothamSemibold
    lbl.TextSize = 13
    lbl.TextColor3 = Color3.fromRGB(160,200,255)
    lbl.Text = text
    lbl.TextXAlignment = Enum.TextXAlignment.Left
    return lbl
end

-- toggle button factory
local function MakeToggle(parent, name, initial, onToggle)
    local btn = Instance.new("TextButton", parent)
    btn.Size = UDim2.new(1,0,0,38)
    btn.BackgroundColor3 = initial and Color3.fromRGB(12,60,30) or Color3.fromRGB(20,20,30)
    btn.Font = Enum.Font.Gotham
    btn.TextSize = 15
    btn.TextColor3 = Color3.fromRGB(220,220,255)
    btn.Text = name .. (initial and " â€¢ ON" or " â€¢ OFF")
    btn.AutoButtonColor = true
    local stroke = Instance.new("UIStroke", btn); stroke.Color = Color3.fromRGB(80,160,255); stroke.Transparency = 0.6
    Instance.new("UICorner", btn).CornerRadius = UDim.new(0,8)
    local toggled = initial
    btn.MouseButton1Click:Connect(function()
        toggled = not toggled
        btn.Text = name .. (toggled and " â€¢ ON" or " â€¢ OFF")
        btn.BackgroundColor3 = toggled and Color3.fromRGB(12,60,30) or Color3.fromRGB(20,20,30)
        pcall(onToggle, toggled)
    end)
    return btn
end

-- left: Player Mods
local leftLayout = Instance.new("UIListLayout", left); leftLayout.Padding = UDim.new(0,8)
SectionLabel("Player Mods").Parent = left

local speedToggle = MakeToggle(left, "Speed", S.speedEnabled, function(on)
    S.speedEnabled = on
    local hum = getHumanoid(); if hum and not S.flyEnabled then hum.WalkSpeed = on and S.speedValue or 16 end
end)

-- speed slider row
local speedRow = Instance.new("Frame", left); speedRow.Size = UDim2.new(1,0,0,36); speedRow.BackgroundTransparency = 1
local speedLabel = Instance.new("TextLabel", speedRow); speedLabel.Size = UDim2.new(0.5,0,1,0); speedLabel.BackgroundTransparency = 1; speedLabel.Text = "Speed: "..tostring(S.speedValue); speedLabel.Font = Enum.Font.Gotham; speedLabel.TextSize = 14; speedLabel.TextColor3 = Color3.fromRGB(200,200,255); speedLabel.TextXAlignment = Enum.TextXAlignment.Left
local sBarBg = Instance.new("Frame", speedRow); sBarBg.Size = UDim2.new(0.5,-6,0,12); sBarBg.Position = UDim2.new(0.5,6,0,12); sBarBg.BackgroundColor3 = Color3.fromRGB(12,12,20); Instance.new("UICorner", sBarBg).CornerRadius = UDim.new(0,6)
local sBar = Instance.new("Frame", sBarBg); sBar.Size = UDim2.new((S.speedValue-16)/(200-16), 0, 1, 0); Instance.new("UICorner", sBar)
local sDragging = false
sBarBg.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 or inp.UserInputType==Enum.UserInputType.Touch then sDragging = true end end)
sBarBg.InputEnded:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 or inp.UserInputType==Enum.UserInputType.Touch then sDragging = false end end)
UserInputService.InputChanged:Connect(function(inp)
    if not sDragging then return end
    if inp.UserInputType ~= Enum.UserInputType.MouseMovement and inp.UserInputType ~= Enum.UserInputType.Touch then return end
    local rel = math.clamp((inp.Position.X - sBarBg.AbsolutePosition.X) / sBarBg.AbsoluteSize.X, 0, 1)
    sBar.Size = UDim2.new(rel,0,1,0)
    local val = math.floor(16 + (200-16)*rel + 0.5)
    S.speedValue = val
    speedLabel.Text = "Speed: "..tostring(val)
    local hum = getHumanoid(); if hum and S.speedEnabled and not S.flyEnabled then hum.WalkSpeed = val end
end)

local jumpToggle = MakeToggle(left, "Jump", S.jumpEnabled, function(on)
    S.jumpEnabled = on
    local hum = getHumanoid(); if hum then hum.JumpPower = on and S.jumpValue or 50 end
end)

local jumpRow = Instance.new("Frame", left); jumpRow.Size = UDim2.new(1,0,0,36); jumpRow.BackgroundTransparency = 1
local jumpLabel = Instance.new("TextLabel", jumpRow); jumpLabel.Size = UDim2.new(0.5,0,1,0); jumpLabel.BackgroundTransparency = 1; jumpLabel.Text = "Jump: "..tostring(S.jumpValue); jumpLabel.Font = Enum.Font.Gotham; jumpLabel.TextSize = 14; jumpLabel.TextColor3 = Color3.fromRGB(200,200,255); jumpLabel.TextXAlignment = Enum.TextXAlignment.Left
local jBarBg = Instance.new("Frame", jumpRow); jBarBg.Size = UDim2.new(0.5,-6,0,12); jBarBg.Position = UDim2.new(0.5,6,0,12); jBarBg.BackgroundColor3 = Color3.fromRGB(12,12,20); Instance.new("UICorner", jBarBg).CornerRadius = UDim.new(0,6)
local jBar = Instance.new("Frame", jBarBg); jBar.Size = UDim2.new((S.jumpValue-50)/(300-50),0,1,0); Instance.new("UICorner", jBar)
local jDragging = false
jBarBg.InputBegan:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 or inp.UserInputType==Enum.UserInputType.Touch then jDragging = true end end)
jBarBg.InputEnded:Connect(function(inp) if inp.UserInputType==Enum.UserInputType.MouseButton1 or inp.UserInputType==Enum.UserInputType.Touch then jDragging = false end end)
UserInputService.InputChanged:Connect(function(inp)
    if not jDragging then return end
    if inp.UserInputType ~= Enum.UserInputType.MouseMovement and inp.UserInputType ~= Enum.UserInputType.Touch then return end
    local rel = math.clamp((inp.Position.X - jBarBg.AbsolutePosition.X) / jBarBg.AbsoluteSize.X, 0, 1)
    jBar.Size = UDim2.new(rel,0,1,0)
    local val = math.floor(50 + (300-50) * rel + 0.5)
    S.jumpValue = val
    jumpLabel.Text = "Jump: "..tostring(val)
    local hum = getHumanoid(); if hum and S.jumpEnabled then hum.JumpPower = val end
end)

local flyToggle = MakeToggle(left, "Fly (W/A/S/D + Space/LCtrl)", S.flyEnabled, function(on)
    if on then startFly() else stopFly() end
end)

local godToggle = MakeToggle(left, "GodMode", S.godEnabled, function(on)
    S.godEnabled = on
    local hum = getHumanoid()
    if hum then
        if on then hum.MaxHealth = math.huge; hum.Health = hum.MaxHealth else hum.MaxHealth = 100; if hum.Health>100 then hum.Health=100 end end
    end
end)

-- All On / Off
local allRow = Instance.new("Frame", left); allRow.Size = UDim2.new(1,0,0,40); allRow.BackgroundTransparency = 1
local allOn = Instance.new("TextButton", allRow); allOn.Size = UDim2.new(0.5,-6,1,0); allOn.Position = UDim2.new(0,0,0,0); allOn.Text = "All ON"; allOn.Font = Enum.Font.GothamBold; allOn.TextSize = 14; allOn.BackgroundColor3 = Color3.fromRGB(30,120,40); Instance.new("UICorner", allOn).CornerRadius = UDim.new(0,6)
local allOff = Instance.new("TextButton", allRow); allOff.Size = UDim2.new(0.5,-6,1,0); allOff.Position = UDim2.new(0.5,6,0,0); allOff.Text = "All OFF"; allOff.Font = Enum.Font.GothamBold; allOff.TextSize = 14; allOff.BackgroundColor3 = Color3.fromRGB(120,30,30); Instance.new("UICorner", allOff).CornerRadius = UDim.new(0,6)
allRow.Parent = left

allOn.MouseButton1Click:Connect(function()
    S.speedEnabled = true; S.jumpEnabled = true; S.godEnabled = true
    local hum = getHumanoid()
    if hum then hum.WalkSpeed = S.speedValue; hum.JumpPower = S.jumpValue; hum.MaxHealth = math.huge; hum.Health = hum.MaxHealth end
    speedToggle.BackgroundColor3 = Color3.fromRGB(12,60,30); speedToggle.Text = "Speed â€¢ ON"
    jumpToggle.BackgroundColor3 = Color3.fromRGB(12,60,30); jumpToggle.Text = "Jump â€¢ ON"
    godToggle.BackgroundColor3 = Color3.fromRGB(12,60,30); godToggle.Text = "GodMode â€¢ ON"
    notify("All","Enabled",1.4)
end)

allOff.MouseButton1Click:Connect(function()
    S.speedEnabled = false; S.jumpEnabled = false; S.godEnabled = false
    local hum = getHumanoid()
    if hum then hum.WalkSpeed = 16; hum.JumpPower = 50; hum.MaxHealth = 100; if hum.Health>100 then hum.Health=100 end end
    speedToggle.BackgroundColor3 = Color3.fromRGB(20,20,30); speedToggle.Text = "Speed â€¢ OFF"
    jumpToggle.BackgroundColor3 = Color3.fromRGB(20,20,30); jumpToggle.Text = "Jump â€¢ OFF"
    godToggle.BackgroundColor3 = Color3.fromRGB(20,20,30); godToggle.Text = "GodMode â€¢ OFF"
    stopFly()
    notify("All","Disabled",1.4)
end)

-- right: avatar copy
SectionLabel("Avatar Copy").Parent = right
local scroll = Instance.new("ScrollingFrame", right)
scroll.Size = UDim2.new(1,0,0.74,0)
scroll.Position = UDim2.new(0,0,0.06,0)
scroll.BackgroundTransparency = 1
scroll.ScrollBarThickness = 6

local copyBtn = Instance.new("TextButton", right)
copyBtn.Size = UDim2.new(1,0,0,36)
copyBtn.Position = UDim2.new(0,0,0.82,0)
copyBtn.Text = "Copy Selected Avatar"
copyBtn.BackgroundColor3 = Color3.fromRGB(70,40,160)
copyBtn.Font = Enum.Font.GothamBold
copyBtn.TextColor3 = Color3.fromRGB(240,240,255)
Instance.new("UICorner", copyBtn).CornerRadius = UDim.new(0,6)

local refreshBtn = Instance.new("TextButton", right)
refreshBtn.Size = UDim2.new(1,0,0,28)
refreshBtn.Position = UDim2.new(0,0,0.9,0)
refreshBtn.Text = "Refresh List"
refreshBtn.BackgroundColor3 = Color3.fromRGB(30,30,50)
refreshBtn.Font = Enum.Font.Gotham
refreshBtn.TextColor3 = Color3.fromRGB(220,220,255)
Instance.new("UICorner", refreshBtn).CornerRadius = UDim.new(0,6)

populatePlayerList(scroll)
task.wait(0.06)
local ll = scroll:FindFirstChildWhichIsA("UIListLayout")
if ll then scroll.CanvasSize = UDim2.new(0,0,0, ll.AbsoluteContentSize.Y + 8) end

refreshBtn.MouseButton1Click:Connect(function()
    populatePlayerList(scroll)
    task.wait(0.05)
    local lo = scroll:FindFirstChildWhichIsA("UIListLayout")
    if lo then scroll.CanvasSize = UDim2.new(0,0,0, lo.AbsoluteContentSize.Y + 8) end
    notify("List","Refreshed",1.2)
end)

copyBtn.MouseButton1Click:Connect(function()
    local sel = scroll.Selected
    if sel and Players:FindFirstChild(sel.Name) then copyAvatar(sel) else notify("Avatar Copy","No selection",1.6) end
end)

-- teleport button
local tpBtn = Instance.new("TextButton", main)
tpBtn.Text = "Teleport to Spawn"
tpBtn.Size = UDim2.new(0.44, 0, 0, 34)
tpBtn.Position = UDim2.new(0.05, 0, 0.92, 0)
tpBtn.Font = Enum.Font.GothamBold
tpBtn.TextSize = 14
tpBtn.BackgroundColor3 = Color3.fromRGB(30,90,180)
tpBtn.TextColor3 = Color3.fromRGB(255,255,255)
Instance.new("UICorner", tpBtn).CornerRadius = UDim.new(0,6)
tpBtn.MouseButton1Click:Connect(function()
    local ch = localPlayer.Character
    if ch and ch:FindFirstChild("HumanoidRootPart") then
        local spawn = workspace:FindFirstChildOfClass("SpawnLocation") or workspace:FindFirstChild("Spawn")
        if spawn and spawn:IsA("BasePart") then ch.HumanoidRootPart.CFrame = spawn.CFrame + Vector3.new(0,3,0) else ch.HumanoidRootPart.CFrame = CFrame.new(0,10,0) end
        notify("TP","Teleported",1.2)
    end
end)

-- draggable (title bar drag for mouse, touch anywhere for mobile)
local dragging = false; local dragInput = nil; local dragStart = nil; local startPos = nil
titleBar.InputBegan:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragInput = inp
        dragStart = inp.Position
        startPos = main.Position
        inp.Changed:Connect(function()
            if inp.UserInputState == Enum.UserInputState.End then
                dragging = false; dragInput=nil; dragStart=nil; startPos=nil
            end
        end)
    end
end)
UserInputService.InputChanged:Connect(function(inp)
    if dragging and dragInput and inp == dragInput then
        local delta = inp.Position - dragStart
        main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- resizer bottom-right
local resizer = Instance.new("Frame", main); resizer.Name = "Resizer"; resizer.Size = UDim2.new(0,18,0,18); resizer.AnchorPoint = Vector2.new(1,1); resizer.Position = UDim2.new(1,-10,1,-10); resizer.BackgroundColor3 = Color3.fromRGB(28,28,36); Instance.new("UICorner", resizer).CornerRadius = UDim.new(0,6)
local resizing=false; local rInput=nil; local rStart=nil; local rSize=nil
resizer.InputBegan:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.MouseButton1 or inp.UserInputType == Enum.UserInputType.Touch then
        resizing = true; rInput = inp; rStart = inp.Position; rSize = main.AbsoluteSize
        inp.Changed:Connect(function()
            if inp.UserInputState == Enum.UserInputState.End then resizing=false; rInput=nil; rStart=nil; rSize=nil end
        end)
    end
end)
UserInputService.InputChanged:Connect(function(inp)
    if resizing and rInput and inp == rInput then
        local delta = inp.Position - rStart
        local newW = math.clamp(rSize.X + delta.X, 320, workspace.CurrentCamera.ViewportSize.X - 40)
        local newH = math.clamp(rSize.Y + delta.Y, 240, workspace.CurrentCamera.ViewportSize.Y - 80)
        main.Size = UDim2.new(0, newW, 0, newH)
    end
end)

-- pinch-to-zoom for mobile
local touches = {}; local pinchActive=false; local pinchStartDist=nil; local pinchStartSize=nil
UserInputService.InputBegan:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.Touch then
        touches[inp.UserInputId] = inp
        local count = 0 for _ in pairs(touches) do count = count + 1 end
        if count == 2 then
            local ids = {}
            for _,t in pairs(touches) do table.insert(ids, t) end
            pinchActive = true
            pinchStartDist = (ids[1].Position - ids[2].Position).Magnitude
            pinchStartSize = main.AbsoluteSize
        end
    end
end)
UserInputService.InputChanged:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.Touch and pinchActive then touches[inp.UserInputId] = inp end
    if pinchActive then
        local ids = {}
        for _,t in pairs(touches) do table.insert(ids, t) end
        if #ids >= 2 and pinchStartDist and pinchStartSize then
            local curDist = (ids[1].Position - ids[2].Position).Magnitude
            local scale = curDist / pinchStartDist
            local w = math.clamp(pinchStartSize.X * scale, 320, workspace.CurrentCamera.ViewportSize.X - 40)
            local h = math.clamp(pinchStartSize.Y * scale, 240, workspace.CurrentCamera.ViewportSize.Y - 80)
            main.Size = UDim2.new(0, math.floor(w+0.5), 0, math.floor(h+0.5))
        end
    end
end)
UserInputService.InputEnded:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.Touch then touches[inp.UserInputId] = nil local count=0 for _ in pairs(touches) do count=count+1 end if count < 2 then pinchActive=false; pinchStartDist=nil; pinchStartSize=nil end end
end)

-- plus/minus quick scale
local function quickScale(factor)
    local cur = main.AbsoluteSize
    local tw = math.clamp(cur.X * factor, 320, workspace.CurrentCamera.ViewportSize.X - 40)
    local th = math.clamp(cur.Y * factor, 240, workspace.CurrentCamera.ViewportSize.Y - 80)
    main.Size = UDim2.new(0, math.floor(tw+0.5), 0, math.floor(th+0.5))
end
plusBtn.MouseButton1Click:Connect(function() quickScale(1.12) end)
minusBtn.MouseButton1Click:Connect(function() quickScale(0.88) end)

-- open button (top-right)
local openBtn = Instance.new("TextButton", playerGui)
openBtn.Name = "LeoHubUI_OpenBtn"
openBtn.AnchorPoint = Vector2.new(1,0)
openBtn.Position = UDim2.new(1, -16, 0, 12)
openBtn.Size = UDim2.new(0, 100, 0, 36)
openBtn.BackgroundColor3 = Color3.fromRGB(24,24,34)
openBtn.Text = "LEOHUB"
openBtn.Font = Enum.Font.GothamBold
openBtn.TextSize = 14
openBtn.TextColor3 = Color3.fromRGB(200,240,255)
Instance.new("UICorner", openBtn).CornerRadius = UDim.new(0,8)
openBtn.ZIndex = 100

-- open/close tween
local animLock = false
local tweenIn = TweenInfo.new(0.28, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local tweenOut = TweenInfo.new(0.22, Enum.EasingStyle.Quad, Enum.EasingDirection.In)

local function showUI()
    if animLock then return end
    animLock = true
    root.Enabled = true
    openBtn.Visible = false
    -- start slightly smaller and tween to exact center & target size
    local small = UDim2.new(0, math.clamp(MAIN_W*0.7, 320, workspace.CurrentCamera.ViewportSize.X - 40), 0, math.clamp(MAIN_H*0.7, 240, workspace.CurrentCamera.ViewportSize.Y - 80))
    main.Size = small
    main.Position = UDim2.new(0.5, 0, 0.5, 20)
    local tw = TweenService:Create(main, tweenIn, {Size = UDim2.new(0, MAIN_W, 0, MAIN_H), Position = UDim2.new(0.5,0,0.5,0)})
    tw:Play()
    tw.Completed:Wait()
    animLock = false
end

local function hideUI()
    if animLock then return end
    animLock = true
    local small = UDim2.new(0, math.clamp(MAIN_W*0.7, 320, workspace.CurrentCamera.ViewportSize.X - 40), 0, math.clamp(MAIN_H*0.7, 240, workspace.CurrentCamera.ViewportSize.Y - 80))
    local tw = TweenService:Create(main, tweenOut, {Size = small, Position = UDim2.new(0.5,0,1.4,0)})
    tw:Play()
    tw.Completed:Wait()
    root.Enabled = false
    openBtn.Visible = true
    -- reset to exact center and default size
    main.AnchorPoint = Vector2.new(0.5,0.5)
    main.Position = UDim2.new(0.5,0,0.5,0)
    main.Size = UDim2.new(0, MAIN_W, 0, MAIN_H)
    animLock = false
end

openBtn.MouseButton1Click:Connect(function() showUI() end)
closeBtn.MouseButton1Click:Connect(function() hideUI() end)

-- keyboard quick toggle (Insert)
UserInputService.InputBegan:Connect(function(input, gp)
    if gp then return end
    if input.KeyCode == Enum.KeyCode.Insert then
        if root.Enabled then hideUI() else showUI() end
    end
end)

-- ensure touch captures during drag to avoid selection
titleBar.InputBegan:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.Touch then
        pcall(function() inp:Capture() end)
    end
end)

-- ensure UI updates when viewport changes (clamp)
workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
    local w,h = workspace.CurrentCamera.ViewportSize.X, workspace.CurrentCamera.ViewportSize.Y
    local nw = math.clamp(main.AbsoluteSize.X, 320, w - 40)
    local nh = math.clamp(main.AbsoluteSize.Y, 240, h - 80)
    main.Size = UDim2.new(0, nw, 0, nh)
end)

-- final cleanup on player leave
Players.PlayerRemoving:Connect(function(p)
    if p == localPlayer then
        cleanupConnections()
        if playerGui:FindFirstChild("LeoHubUI_Root") then pcall(function() playerGui.LeoHubUI_Root:Destroy() end) end
        if playerGui:FindFirstChild("LeoHubUI_OpenBtn") then pcall(function() playerGui.LeoHubUI_OpenBtn:Destroy() end) end
    end
end)

-- return API if loaded via loadstring
return {
    Show = showUI,
    Hide = hideUI,
    ToggleFly = function() if S.flyEnabled then stopFly() else startFly() end end,
    ApplySpeed = function(v) S.speedValue = v; if S.speedEnabled and getHumanoid() and not S.flyEnabled then getHumanoid().WalkSpeed = v end end,
    ApplyJump = function(v) S.jumpValue = v; if S.jumpEnabled and getHumanoid() then getHumanoid().JumpPower = v end end,
    CopyAvatar = copyAvatar
}
